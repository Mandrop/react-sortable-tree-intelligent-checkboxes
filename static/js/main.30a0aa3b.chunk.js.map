{"version":3,"sources":["Tree.js","App.js","index.js"],"names":["firstNames","Tree","props","state","tree","treeModel","TreeModel","this","parse","id","children","title","checked","expanded","treeDataModel","model","walk","strategy","node","getNodeKey","treeIndex","getRandomName","Math","floor","random","length","style","height","treeData","onChange","rootChildren","first","console","log","i","childNode","childNodeDesc","push","reverse","x","descParent","parent","descSiblings","descSiblingsLen","checkedSiblings","y","sibling","checkedSiblingsLen","setState","generateNodeProps","path","subtitle","className","fontSize","value","event","target","newData","changeNodeAtPath","newNode","buttons","nodeId","nodeDescArray","shift","isChecked","b","descDesc","d","type","onClick","addNodeUnderParent","parentKey","expandParent","split","addAsFirstChild","all","forEach","newIdList","removeNodeAtPath","newTree","concat","htmlFor","name","Component","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.30a0aa3b.chunk.js","sourcesContent":["import 'react-sortable-tree/style.css';\n\nimport React, { Component } from 'react';\n//import axios from 'axios';\nimport SortableTree, { addNodeUnderParent, removeNodeAtPath, changeNodeAtPath/*, map*/ } from 'react-sortable-tree';\n\nimport TreeModel from 'tree-model';\n// In your own app, you would need to use import styles once in the app\n// import 'react-sortable-tree/styles.css';\n\nconst firstNames = [\n    'Abraham',\n    'Adam',\n    'Agnar',\n    'Albert',\n    'Albin',\n    'Albrecht',\n    'Alexander',\n    'Alfred',\n    'Alvar',\n    'Ander',\n    'Andrea',\n    'Arthur',\n    'Axel',\n    'Bengt',\n    'Bernhard',\n    'Carl',\n    'Daniel',\n    'Einar',\n    'Elmer',\n    'Eric',\n    'Erik',\n    'Gerhard',\n    'Gunnar',\n    'Gustaf',\n    'Harald',\n    'Herbert',\n    'Herman',\n    'Johan',\n    'John',\n    'Karl',\n    'Leif',\n    'Leonard',\n    'Martin',\n    'Matt',\n    'Mikael',\n    'Nikla',\n    'Norman',\n    'Oliver',\n    'Olof',\n    'Olvir',\n    'Otto',\n    'Patrik',\n    'Peter',\n    'Petter',\n    'Robert',\n    'Rupert',\n    'Sigurd',\n    'Simon',\n];\n\n\n\n\n//console.log(tree.parse(root).model.model);\n\n/*\nconst treeModel = new TreeModel();\n\nconst treeData = treeModel.parse({\n    id: 1,\n    children: [\n        {\n            title: 'IT Manager',\n            id: 2,\n            checked: false\n        },\n        {\n            title: 'Regional Manager',\n            id: 3,\n            expanded: true,\n            checked: true,\n            children: [{ title: 'Branch Manager', checked: false, id: 4 }]\n        },\n    ]\n});\n*/\n\n\nexport default class Tree extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n\n        //console.log(treeModel.parse(treeData).model.model.children);\n\n\n\n        this.state = {\n            //treeData: tree.parse(root).model.model.children,\n            tree: {\n                treeModel: new TreeModel(),\n                get treeDataModel() {\n                    return this.treeModel.parse({\n                        id: 1,\n                        children: [\n                            {\n                                title: 'IT Manager',\n                                id: 2,\n                                checked: false\n                            },\n                            {\n                                title: 'Regional Manager',\n                                id: 3,\n                                expanded: true,\n                                checked: true,\n                                children: [{ title: 'Branch Manager', checked: true, id: 4 }]\n                            },\n                        ]\n                    })\n                },\n                get treeData() {\n                    return this.treeModel.parse(this.treeDataModel).model.model.children\n                }\n            },\n\n\n            /*\n            treeModel: new TreeModel(),\n            treeDataModel: this.state.treeModel.parse({\n                id: 1,\n                children: [\n                    {\n                        title: 'IT Manager',\n                        id: 2,\n                        checked: false\n                    },\n                    {\n                        title: 'Regional Manager',\n                        id: 3,\n                        expanded: true,\n                        checked: true,\n                        children: [{ title: 'Branch Manager', checked: false, id: 4 }]\n                    },\n                ]\n            }),\n            treeData: this.state.treeModel.parse(this.state.treeDataModel).model.model.children\n            */\n            /*\n            treeData: [\n                { title: 'IT Manager', checked: false, id: 1 },\n                {\n                    title: 'Regional Manager',\n                    id: 2,\n                    expanded: true,\n                    checked: true,\n                    subtitle: \"subtitles goes here\",\n                    children: [{ title: 'Branch Manager', checked: false, id: 3 }],\n                },\n            ]*/\n            /*\n             treeData: [\n                 {\n                     value: '/app',\n                     title: 'app',\n                     children: [\n                         {\n                             value: '/app/Http',\n                             title: 'Http',\n                             children: [\n                                 {\n                                     value: '/app/Http/Controllers',\n                                     title: 'Controllers',\n                                     children: [{\n                                         value: '/app/Http/Controllers/WelcomeController.js',\n                                         title: 'WelcomeController.js',\n                                     }],\n                                 },\n                                 {\n                                     value: '/app/Http/routes.js',\n                                     title: 'routes.js',\n                                 },\n                             ],\n                         },\n                         {\n                             value: '/app/Providers',\n                             title: 'Providers',\n                             children: [{\n                                 value: '/app/Providers/EventServiceProvider.js',\n                                 title: 'EventServiceProvider.js',\n                             }],\n                         },\n                     ],\n                 },\n                 {\n                     value: '/config',\n                     title: 'config',\n                     children: [\n                         {\n                             value: '/config/app.js',\n                             title: 'app.js',\n                         },\n                         {\n                             value: '/config/database.js',\n                             title: 'database.js',\n                         },\n                     ],\n                 },\n                 {\n                     value: '/public',\n                     title: 'public',\n                     children: [\n                         {\n                             value: '/public/assets/',\n                             title: 'assets',\n                             children: [{\n                                 value: '/public/assets/style.css',\n                                 title: 'style.css',\n                             }],\n                         },\n                         {\n                             value: '/public/index.html',\n                             title: 'index.html',\n                         },\n                     ],\n                 },\n                 {\n                     value: '/.env',\n                     title: '.env',\n                 },\n                 {\n                     value: '/.gitignore',\n                     title: '.gitignore',\n                 },\n                 {\n                     value: '/README.md',\n                     title: 'README.md',\n                 },\n             ]*/\n        };\n    }\n\n    /*\n    componentDidMount() {\n        axios.get('http://127.0.0.1:8000/api/goals/')\n            .then(res => {\n                //const arr = [];\n                //arr.push(res.data[0].goal);\n                const data = res.data[0].goal;\n                this.setState({ treeData: data });\n            });\n    }\n    */\n\n    /*\n    componentDidUpdate() {\n        const treeDataObject = { goal: this.state.treeData };\n        console.log('PUTTING DATA!!!');\n        console.log(treeDataObject);\n        axios.put('http://127.0.0.1:8000/api/goals/3/', treeDataObject)\n            .catch(err => console.log(err));\n    }*/\n\n    componentDidUpdate() {\n        /*\n        console.log('sfdsfadsfadsfsdafdsaf');\n        console.log(this.state.treeDataModel.model.children);\n        console.log(this.state.treeData);\n        var i = 0;\n        this.state.treeDataModel.walk(function (node) {\n            i = i + 1;\n            console.log(node);\n        });\n        i = i - 1;\n        console.log(i);\n        */\n    }\n\n\n    /*\n        postData = () => {\n            /*\n            console.log('POSTING DATA!!!');\n            console.log(this.state.treeData);\n            const treeDataObject = { goal: this.state.treeData };\n            console.log(treeDataObject);\n            axios.put('http://127.0.0.1:8000/api/goals/3/', treeDataObject)\n                .catch(err => console.log(err));\n            */\n    /*};*/\n\n\n\n    render() {\n        var treeModel = { ...this.state.tree };\n        //console.log('........');\n        treeModel.treeDataModel.walk({ strategy: 'post' }, function (node) {\n            //console.log(node);\n        });\n        //console.log('........');\n        //console.log('rendering this.state');\n        //console.log(this.state);\n        //console.log('this.state end');\n        //console.log(this.state.treeData);\n        const getNodeKey = ({ treeIndex }) => treeIndex;\n        const getRandomName = () =>\n            firstNames[Math.floor(Math.random() * firstNames.length)];\n        return (\n            <div>\n                <div style={{ height: 400 }}>\n                    <SortableTree\n                        treeData={this.state.tree.treeDataModel.model.children}\n                        onChange={treeData => {\n\n                            var treeModel = { ...this.state.tree };\n\n                            treeModel.treeDataModel = treeModel.treeModel.parse({ id: 1, children: treeData });\n                            treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n\n                            // GET ROOT\n                            var root = treeModel.treeDataModel.first(function (node) {\n                                return node.model.id === 1;\n                            });\n\n                            // GET ROOT CHILDREN\n                            var rootChildren = root.children;\n\n                            // FOR EACH ROOT CHILD\n                            console.log('/////////////////');\n                            for (var i = 0; i < rootChildren.length; i++) {\n                                var childNode = rootChildren[i];\n\n                                //console.log(rootChildren[i]);\n\n                                // GET ALL CHILDNODE DESCENDANTS INCLUDING SELF\n                                var childNodeDesc = [];\n\n                                childNode.walk(function (node) {\n                                    childNodeDesc.push(node);\n                                });\n\n                                // REVERSE DESCENDANTS TO GET CHILDREN FIRST\n                                childNodeDesc.reverse();\n\n\n                                // FOR EACH DESCENDANT REVERSED\n                                for (var x = 0; x < childNodeDesc.length; x++) {\n                                    // GET DESC PARENT TO GET PARENTS CHILDREN AND SET AS DESC SIBLINGS\n                                    var descParent = childNodeDesc[x].parent;\n\n                                    var descSiblings = descParent.children;\n                                    var descSiblingsLen = descSiblings.length;\n\n                                    // ARRAY TO HOLD ALL SIBLINGS WHERE CHECKED IS TRUE\n                                    var checkedSiblings = [];\n\n                                    // FOR EACH SIBLINGS CHECK IF CHECKED IF TRUE THEN ADD TO ARRAY\n                                    for (var y = 0; y < descSiblings.length; y++) {\n                                        var sibling = descSiblings[y];\n                                        if (sibling.model.checked === true) {\n                                            checkedSiblings.push(sibling);\n                                        }\n                                    }\n\n                                    var checkedSiblingsLen = checkedSiblings.length;\n\n                                    // HVIS ALLE SIBLINGS CHECKED ER TRUE SÅ OPDATER PARENT TIL CHECKED TRUE, HVIS IKKE SÅ SÆT PARENT TIL FALSE\n                                    if (descSiblingsLen == checkedSiblingsLen) {\n                                        descParent.model.checked = true;\n                                    } else {\n                                        descParent.model.checked = false;\n                                    };\n\n                                }\n\n\n                            }\n\n                            treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                            this.setState({ tree: treeModel });\n                        }\n                        }\n\n                        generateNodeProps={({ node, path }) => ({\n                            subtitle: (\n                                <p>{node.subtitle}</p>\n                            ),\n                            className: 'customNodeClassName',\n                            title: (\n                                <input\n                                    style={{ fontSize: '1.1rem' }}\n                                    value={node.title}\n                                    onChange={event => {\n\n                                        const title = event.target.value;\n\n                                        const newData = ({\n                                            treeData: changeNodeAtPath({\n                                                treeData: this.state.tree.treeData,\n                                                path,\n                                                getNodeKey,\n                                                newNode: { ...node, title },\n\n                                            }),\n                                        });\n\n\n                                        var treeModel = { ...this.state.tree };\n\n\n                                        treeModel.treeDataModel = treeModel.treeModel.parse({ id: 1, children: newData.treeData });\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                                        this.setState({ tree: treeModel });\n\n\n                                    }}\n                                />\n                            ),\n\n                            buttons: [\n                                <input checked={node.checked}\n                                    onChange={() => {\n                                        var treeModel = { ...this.state.tree };\n\n                                        const nodeId = node.id;\n\n\n                                        // FIND THE NODE AND CHECK/UNCHECK\n                                        treeModel.treeDataModel.walk(function (node) {\n                                            if (node.model.id === nodeId) {\n                                                if (node.model.checked === false) {\n                                                    node.model.checked = true;\n                                                } else {\n                                                    node.model.checked = false;\n                                                }\n                                            }\n                                        });\n\n\n                                        treeModel.treeDataModel.walk(function (node) {\n                                            if (node.model.id === nodeId) {\n\n                                                var nodeDescArray = [];\n\n                                                node.walk(function (node) {\n                                                    nodeDescArray.push(node);\n                                                });\n\n                                                nodeDescArray.shift();\n\n                                                var isChecked = node.model.checked;\n\n                                                for (var b = 0; b < nodeDescArray.length; b++) {\n\n\n                                                    // CHECK IF DESC HAS CHILDREN, IF TRUE SET ALL CHILDREN ACCORDING TO WHETHER DESC CHECKED IS TRUE OR FALSE\n                                                    var descDesc = [];\n\n                                                    nodeDescArray[b].walk(function (node) {\n                                                        descDesc.push(node);\n                                                    });\n\n\n                                                    for (var d = 0; d < descDesc.length; d++) {\n                                                        descDesc[d].model.checked = isChecked;\n\n                                                    }\n\n\n                                                }\n                                            }\n                                        });\n\n\n\n\n\n\n                                        // GET ROOT\n                                        var root = treeModel.treeDataModel.first(function (node) {\n                                            return node.model.id === 1;\n                                        });\n\n                                        // GET ROOT CHILDREN\n                                        var rootChildren = root.children;\n\n                                        // FOR EACH ROOT CHILD\n                                        for (var i = 0; i < rootChildren.length; i++) {\n                                            var childNode = rootChildren[i];\n\n\n                                            // GET ALL CHILDNODE DESCENDANTS INCLUDING SELF\n                                            var childNodeDesc = [];\n\n                                            //console.log('CHILDNODE WALK');\n                                            childNode.walk(function (node) {\n                                                childNodeDesc.push(node);\n                                            });\n\n\n                                            // REVERSE DESCENDANTS TO GET CHILDREN FIRST\n                                            childNodeDesc.reverse();\n\n\n                                            // FOR EACH DESCENDANT REVERSED\n                                            for (var x = 0; x < childNodeDesc.length; x++) {\n\n                                                // GET DESC PARENT TO GET PARENTS CHILDREN AND SET AS DESC SIBLINGS\n                                                var descParent = childNodeDesc[x].parent;\n\n                                                var descSiblings = descParent.children;\n                                                var descSiblingsLen = descSiblings.length;\n\n                                                // ARRAY TO HOLD ALL SIBLINGS WHERE CHECKED IS TRUE\n                                                var checkedSiblings = [];\n\n                                                // FOR EACH SIBLINGS CHECK IF CHECKED IF TRUE THEN ADD TO ARRAY\n                                                for (var y = 0; y < descSiblings.length; y++) {\n                                                    var sibling = descSiblings[y];\n                                                    if (sibling.model.checked === true) {\n                                                        checkedSiblings.push(sibling);\n                                                    }\n                                                }\n\n                                                var checkedSiblingsLen = checkedSiblings.length;\n\n                                                // HVIS ALLE SIBLINGS CHECKED ER TRUE SÅ OPDATER PARENT TIL CHECKED TRUE, HVIS IKKE SÅ SÆT PARENT TIL FALSE\n                                                if (descSiblingsLen == checkedSiblingsLen) {\n                                                    descParent.model.checked = true;\n                                                } else {\n                                                    descParent.model.checked = false;\n                                                };\n                                            }\n\n                                        }\n\n\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                                        this.setState({ tree: treeModel });\n\n                                    }}\n\n                                    type='checkbox' value='pik'></input>,\n\n                                <button\n                                    onClick={() => {\n                                        const newData = addNodeUnderParent({\n                                            treeData: this.state.tree.treeData,\n                                            parentKey: path[path.length - 1],\n                                            expandParent: true,\n                                            getNodeKey,\n                                            newNode: {\n                                                title: `${getRandomName()} ${node.title.split(' ')[0]\n                                                    }sson`,\n                                                checked: false,\n                                                id: null\n                                            },\n                                            addAsFirstChild: this.state.tree.treeData.addAsFirstChild,\n                                        }).treeData;\n\n\n                                        var treeModel = { ...this.state.tree };\n\n                                        treeModel.treeDataModel = treeModel.treeModel.parse({ id: 1, children: newData });\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n\n                                        /* GIVE EACH CHILD UNIQUE ID */\n                                        var children = 0;\n\n                                        treeModel.treeDataModel.all( /* predicate */).forEach(function (node) {\n                                            children = children + 1;\n                                        });\n\n\n                                        // LAV LISTE MED UNIKKE NUMRE PÅ LÆNGDE MED CHILDREN\n\n                                        var newIdList = [];\n\n                                        for (var x = 1; x <= children; x++) {\n                                            newIdList.push(x);\n                                        };\n\n                                        var nodeId;\n\n                                        // GIV HVER CHILD DET FØRSTE NUMMER FRA LISTEN SOM ID, SLET DEREFTER NUMMERET FRA LISTEN OG GENTAG INDTIL DER IKKE ER FLERE TILBAGE\n                                        treeModel.treeDataModel.walk(function (node) {\n                                            if (node.model.id === null) {\n                                                nodeId = newIdList[0];\n                                            }\n                                            node.model.id = newIdList[0];\n\n                                            newIdList.shift();\n                                        });\n\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                                        treeModel.treeDataModel.walk(function (node) {\n                                            if (node.model.id === nodeId) {\n\n                                                var nodeDescArray = [];\n\n                                                node.walk(function (node) {\n                                                    nodeDescArray.push(node);\n                                                });\n\n                                                nodeDescArray.shift();\n\n                                                var isChecked = node.model.checked;\n\n                                                for (var b = 0; b < nodeDescArray.length; b++) {\n                                                    // CHECK IF DESC HAS CHILDREN, IF TRUE SET ALL CHILDREN ACCORDING TO WHETHER DESC CHECKED IS TRUE OR FALSE\n                                                    var descDesc = [];\n\n\n                                                    nodeDescArray[b].walk(function (node) {\n                                                        descDesc.push(node);\n                                                    });\n\n                                                    for (var d = 0; d < descDesc.length; d++) {\n                                                        descDesc[d].model.checked = isChecked;\n                                                    }\n\n                                                }\n\n                                            }\n                                        });\n\n\n                                        // GET ROOT\n                                        var root = treeModel.treeDataModel.first(function (node) {\n                                            return node.model.id === 1;\n                                        });\n\n                                        // GET ROOT CHILDREN\n                                        var rootChildren = root.children;\n\n                                        // FOR EACH ROOT CHILD\n                                        for (var i = 0; i < rootChildren.length; i++) {\n                                            var childNode = rootChildren[i];\n\n                                            // GET ALL CHILDNODE DESCENDANTS INCLUDING SELF\n                                            var childNodeDesc = [];\n\n                                            //console.log('CHILDNODE WALK');\n                                            childNode.walk(function (node) {\n                                                childNodeDesc.push(node);\n                                            });\n\n                                            // REVERSE DESCENDANTS TO GET CHILDREN FIRST\n                                            childNodeDesc.reverse();\n\n\n\n\n                                            // FOR EACH DESCENDANT REVERSED\n                                            for (var x = 0; x < childNodeDesc.length; x++) {\n\n\n                                                // GET DESC PARENT TO GET PARENTS CHILDREN AND SET AS DESC SIBLINGS\n                                                var descParent = childNodeDesc[x].parent;\n\n                                                var descSiblings = descParent.children;\n                                                var descSiblingsLen = descSiblings.length;\n\n                                                // ARRAY TO HOLD ALL SIBLINGS WHERE CHECKED IS TRUE\n                                                var checkedSiblings = [];\n\n                                                // FOR EACH SIBLINGS CHECK IF CHECKED IF TRUE THEN ADD TO ARRAY\n                                                for (var y = 0; y < descSiblings.length; y++) {\n                                                    var sibling = descSiblings[y];\n                                                    if (sibling.model.checked === true) {\n                                                        checkedSiblings.push(sibling);\n                                                    }\n                                                }\n\n                                                var checkedSiblingsLen = checkedSiblings.length;\n\n                                                // HVIS ALLE SIBLINGS CHECKED ER TRUE SÅ OPDATER PARENT TIL CHECKED TRUE, HVIS IKKE SÅ SÆT PARENT TIL FALSE\n                                                if (descSiblingsLen == checkedSiblingsLen) {\n                                                    descParent.model.checked = true;\n                                                } else {\n                                                    descParent.model.checked = false;\n                                                };\n\n                                            }\n\n                                        }\n\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                                        this.setState({ tree: treeModel });\n\n                                    }\n                                    }\n                                >\n                                    Add Child\n                </button>,\n                                <button\n                                    onClick={() => {\n\n                                        const newData = ({\n                                            treeData: removeNodeAtPath({\n                                                treeData: this.state.tree.treeData,\n                                                path,\n                                                getNodeKey,\n                                            }),\n                                        });\n\n\n                                        var treeModel = { ...this.state.tree };\n\n\n                                        treeModel.treeDataModel = treeModel.treeModel.parse({ id: 1, children: newData.treeData });\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                                        /* GIVE EACH CHILD UNIQUE ID */\n                                        var children = 0;\n\n                                        treeModel.treeDataModel.all( /* predicate */).forEach(function (node) {\n                                            children = children + 1;\n                                        });\n\n\n                                        // LAV LISTE MED UNIKKE NUMRE PÅ LÆNGDE MED CHILDREN\n\n                                        var newIdList = [];\n\n                                        for (var x = 1; x <= children; x++) {\n                                            newIdList.push(x);\n                                        };\n\n                                        // GIV HVER CHILD DET FØRSTE NUMMER FRA LISTEN SOM ID, SLET DEREFTER NUMMERET FRA LISTEN OG GENTAG INDTIL DER IKKE ER FLERE TILBAGE\n                                        treeModel.treeDataModel.walk(function (node) {\n                                            node.model.id = newIdList[0];\n                                            newIdList.shift();\n                                        });\n\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n\n\n                                        // GET ROOT\n                                        var root = treeModel.treeDataModel.first(function (node) {\n                                            return node.model.id === 1;\n                                        });\n\n                                        // GET ROOT CHILDREN\n                                        var rootChildren = root.children;\n\n                                        // FOR EACH ROOT CHILD\n                                        for (var i = 0; i < rootChildren.length; i++) {\n                                            var childNode = rootChildren[i];\n\n                                            // GET ALL CHILDNODE DESCENDANTS INCLUDING SELF\n                                            var childNodeDesc = [];\n\n                                            //console.log('CHILDNODE WALK');\n                                            childNode.walk(function (node) {\n                                                childNodeDesc.push(node);\n                                            });\n\n\n\n                                            // REVERSE DESCENDANTS TO GET CHILDREN FIRST\n                                            childNodeDesc.reverse();\n\n\n                                            // FOR EACH DESCENDANT REVERSED\n                                            for (var x = 0; x < childNodeDesc.length; x++) {\n\n                                                // GET DESC PARENT TO GET PARENTS CHILDREN AND SET AS DESC SIBLINGS\n                                                var descParent = childNodeDesc[x].parent;\n\n                                                var descSiblings = descParent.children;\n                                                var descSiblingsLen = descSiblings.length;\n\n                                                // ARRAY TO HOLD ALL SIBLINGS WHERE CHECKED IS TRUE\n                                                var checkedSiblings = [];\n\n                                                // FOR EACH SIBLINGS CHECK IF CHECKED IF TRUE THEN ADD TO ARRAY\n                                                for (var y = 0; y < descSiblings.length; y++) {\n                                                    var sibling = descSiblings[y];\n                                                    if (sibling.model.checked === true) {\n                                                        checkedSiblings.push(sibling);\n                                                    }\n                                                }\n\n                                                var checkedSiblingsLen = checkedSiblings.length;\n\n                                                // HVIS ALLE SIBLINGS CHECKED ER TRUE SÅ OPDATER PARENT TIL CHECKED TRUE, HVIS IKKE SÅ SÆT PARENT TIL FALSE\n                                                if (descSiblingsLen == checkedSiblingsLen) {\n                                                    descParent.model.checked = true;\n                                                } else {\n                                                    descParent.model.checked = false;\n                                                };\n\n                                            }\n\n                                        }\n\n                                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                                        this.setState({ tree: treeModel });\n                                    }\n                                    }\n                                >\n                                    Remove\n                </button>,\n                            ],\n                        })}\n                    />\n                </div>\n\n                <button\n                    onClick={() => {\n\n                        const newTree = {\n                            treeData: this.state.tree.treeData.concat({\n                                title: `${getRandomName()} ${getRandomName()}sson`,\n                                checked: false,\n                                id: 1\n                            }),\n\n                        };\n\n                        var treeModel = { ...this.state.tree };\n\n\n                        treeModel.treeDataModel = treeModel.treeModel.parse({ id: 1, children: newTree.treeData });\n                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                        /* GIVE EACH CHILD UNIQUE ID */\n                        var children = 0;\n\n                        treeModel.treeDataModel.all( /* predicate */).forEach(function (node) {\n                            children = children + 1;\n                        });\n\n\n                        // LAV LISTE MED UNIKKE NUMRE PÅ LÆNGDE MED CHILDREN\n                        var newIdList = [];\n\n                        for (var x = 1; x <= children; x++) {\n                            newIdList.push(x);\n                        };\n\n                        // GIV HVER CHILD DET FØRSTE NUMMER FRA LISTEN SOM ID, SLET DEREFTER NUMMERET FRA LISTEN OG GENTAG INDTIL DER IKKE ER FLERE TILBAGE\n                        treeModel.treeDataModel.walk(function (node) {\n                            node.model.id = newIdList[0];\n                            newIdList.shift();\n                        });\n\n                        treeModel.treeData = treeModel.treeModel.parse(treeModel.treeDataModel).model.model.children;\n\n                        this.setState({ tree: treeModel });\n                    }\n                    }\n                >\n                    Add more\n        </button>\n                <br />\n                <label htmlFor=\"addAsFirstChild\">\n                    Add new nodes at start\n          <input\n                        name=\"addAsFirstChild\"\n                        type=\"checkbox\"\n                        checked={this.state.addAsFirstChild}\n                        onChange={() => {\n                            this.setState(state => ({\n                                addAsFirstChild: !state.addAsFirstChild,\n                            }))\n                        }\n                        }\n                    />\n                </label>\n            </div >\n        );\n    }\n}\n\n","import React from 'react';\n\nimport Tree from './Tree';\n\n\nconst App = () => {\n    return (\n        <Tree />\n    );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}